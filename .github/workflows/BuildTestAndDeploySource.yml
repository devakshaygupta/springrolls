name: Build, Test and Deploy

on:
  pull_request:
    types: [opened, synchronize, closed]
    branches: ["main"]
    paths:
      - "src/**"

  workflow_dispatch:

jobs:
  build_test:
    name: Build and Test
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Create Table Schema and Data for Testing
        run: |
          touch src/test/resources/schema.sql
          cat <<EOF > src/test/resources/schema.sql
          ${{ secrets.TABLE_SCHEMA }}
          EOF
          touch src/test/resources/data.sql
          cat <<EOF > src/test/resources/data.sql
          ${{ secrets.TEST_DATA }}
          EOF

      - name: Build and Test with Maven
        run: mvn -B package --file pom.xml

      - name: Determine New Version
        id: determine_version
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          # Extract the major, minor, and patch versions
          MAJOR=$(echo $CURRENT_VERSION | cut -d'.' -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d'.' -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d'.' -f3)
          # Increment the patch version
          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          echo "::set-output name=new_version::$NEW_VERSION"

      - name: Maven Release - Update Versions
        run: mvn release:update-versions -DautoVersionSubmodules=true -DdevelopmentVersion=${{ steps.determine_version.outputs.new_version }}

      - name: Rename Jar File with Release Version
        run: |
          release_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          mv target/springrolls-*.jar target/springrolls-${release_version}.jar
          mkdir -p springrolls-artifact
          echo ${release_version} > springrolls-artifact/version.txt

      - name: Upload latest version number as an atrifact
        uses: actions/upload-artifact@v3
        with:
          name: springrolls-artifact
          path: springrolls-artifact/version.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload artifact to S3
        run: |
          aws s3 cp target/springrolls-${{ steps.determine_version.outputs.new_version }}.jar s3://${{ secrets.S3_BUCKET }}/springrolls-${{ steps.determine_version.outputs.new_version }}.jar

  deploy:
    name: Deploy to EC2
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Download latest version number as an atrifact
        uses: actions/download-artifact@v3
        with:
          name: springrolls-artifact/version.txt

      - name: Determine New Version
        id: determine_version
        run: |
          NEW_VERSION=$(cat springrolls-artifact/version.txt)
          echo "::set-output name=new_version::$NEW_VERSION"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download artifact from S3
        run: |
          aws s3 cp s3://${{ secrets.S3_BUCKET }}/springrolls-${{ steps.determine_version.outputs.new_version }}.jar ./springrolls-${{ steps.determine_version.outputs.new_version }}.jar

      - name: Set up SSH Key
        run: |
          echo "${{ secrets.DEV_KEY_PAIR }}" >> SpringKeyPair.pem
          chmod 400 SpringKeyPair.pem

      - name: Deploy to EC2
        run: |
          echo "Copying jar to EC2 Instance..."
          scp -i "SpringKeyPair.pem" -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ./springrolls-0.0.1-SNAPSHOT.jar ${{ secrets.DEV_INSTANCE_IP }}:${{ secrets.TARGET_DIR }}
          echo "Jar Copied successfully!!!"
          echo "Attempting logging to machine..."
          ssh -i "SpringKeyPair.pem" -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ${{ secrets.DEV_INSTANCE_IP }} <<EOF
            echo "Switching to application directory"
            cd springrolls
            echo "Stopping the existing application"
            pkill -f "java -jar ${{ secrets.TARGET_DIR }}/springrolls-0.0.1-SNAPSHOT.jar"
            echo "Starting the new version of the application"
            nohup java -jar ${{ secrets.TARGET_DIR }}/springrolls-0.0.1-SNAPSHOT.jar > /dev/null 2>&1 &
            echo "Application Started!!!"
            exit
          EOF
